-- Existing extensions and settings
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

-- Existing extensions (unchanged)
CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";
CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';
SET default_table_access_method = "heap";

-- Existing tables (unchanged)
CREATE TABLE IF NOT EXISTS "public"."credits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "credits" integer DEFAULT 0 NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."credits" OWNER TO "postgres";

ALTER TABLE "public"."credits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."credits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."images" (
    "id" bigint NOT NULL,
    "modelId" bigint NOT NULL,
    "uri" text NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."images" OWNER TO "postgres";

ALTER TABLE "public"."images" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."images_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."models" (
    "id" bigint NOT NULL,
    "name" text,
    "type" text,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "user_id" uuid,
    "status" text DEFAULT 'processing'::text NOT NULL,
    "modelId" text
);

ALTER TABLE "public"."models" OWNER TO "postgres";

ALTER TABLE "public"."models" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."models_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."samples" (
    "id" bigint NOT NULL,
    "uri" text NOT NULL,
    "modelId" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."samples" OWNER TO "postgres";

ALTER TABLE "public"."samples" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."samples_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- New tables
CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" uuid PRIMARY KEY,
    "email" text,
    "name" text,
    "credit_balance" integer,
    "last_credit_update" timestamp with time zone,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    "last_login_at" timestamp with time zone
);

CREATE TABLE IF NOT EXISTS "public"."plans" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" text,
    "description" text,
    "price_in_usd" decimal(10,2),
    "total_credits" integer,
    "max_trainings" smallint,
    "max_generations" smallint,
    "max_edits" smallint,
    "paddle_product_id" text,
    "duration" smallint,
    "billing_cycle" text,
    "is_active" boolean,
    "meta_data" text,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "public"."user_subscriptions" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid REFERENCES "public"."users"("id"),
    "plan_id" bigint REFERENCES "public"."plans"("id"),
    "remaining_training" integer,
    "remaining_generation" integer,
    "remaining_edits" integer,
    "start_date" date,
    "end_date" date,
    "is_active" boolean,
    "auto_renew" boolean,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "public"."subscription_history" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "subscription_id" bigint REFERENCES "public"."user_subscriptions"("id"),
    "start_date" date,
    "end_date" date,
    "status" text,
    "change_type" text,
    "created_at" timestamp with time zone DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "public"."credit_transactions" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid REFERENCES "public"."users"("id"),
    "amount" integer,
    "balance_after" integer,
    "transaction_type" text,
    "entity_type" text,
    "entity_reference_id" text,
    "created_at" timestamp with time zone DEFAULT now()
);

CREATE TABLE IF NOT EXISTS "public"."ml_model_training" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid REFERENCES "public"."users"("id"),
    "name" text UNIQUE NOT NULL,
    "type" text,
    "status" text,
    "tuneId" text,
    "version" text,
    "meta_data" text,
    "created_at" timestamp with time zone DEFAULT now(),
    "updated_at" timestamp with time zone DEFAULT now(),
    "last_used_at" timestamp with time zone
);

CREATE TABLE IF NOT EXISTS "public"."eye_color" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" text NOT NULL,
    "description" text,
    "created_on" timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."hair_color" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" text NOT NULL,
    "description" text,
    "created_on" timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."styles" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "headshot_persona_tag" text[],
    "headshot_type" text[],
    "style_tag" text[],
    "gender" text,
    "style" text,
    "prompt" text,
    "created_on" timestamp with time zone DEFAULT now() NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."user_preferences" (
    "id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid REFERENCES "public"."users"("id"),
    "gender" text,
    "color_id" bigint REFERENCES "public"."eye_color"("id"),
    "hair_color_id" bigint REFERENCES "public"."hair_color"("id"),
    "style_ids" text[],
    "ml_model_training_id" uuid,
    "created_on" timestamp with time zone DEFAULT now() NOT NULL
);

-- Modify existing tables
ALTER TABLE "public"."samples" 
ADD COLUMN IF NOT EXISTS "user_id" uuid REFERENCES "public"."users"("id"),
ADD COLUMN IF NOT EXISTS "file_size" integer,
ADD COLUMN IF NOT EXISTS "file_format" text,
ADD COLUMN IF NOT EXISTS "width" smallint,
ADD COLUMN IF NOT EXISTS "height" smallint;

ALTER TABLE "public"."images" 
ADD COLUMN IF NOT EXISTS "user_id" uuid REFERENCES "public"."users"("id"),
ADD COLUMN IF NOT EXISTS "prompt" text,
ADD COLUMN IF NOT EXISTS "type" text,
ADD COLUMN IF NOT EXISTS "file_size" integer,
ADD COLUMN IF NOT EXISTS "file_format" text,
ADD COLUMN IF NOT EXISTS "width" smallint,
ADD COLUMN IF NOT EXISTS "height" smallint,
ADD COLUMN IF NOT EXISTS "prompt_meta" text,
ADD COLUMN IF NOT EXISTS "status" text,
ADD COLUMN IF NOT EXISTS "feedback" text,
ADD COLUMN IF NOT EXISTS "is_downloaded" boolean,
ADD COLUMN IF NOT EXISTS "updated_at" timestamp with time zone DEFAULT now();

-- Add necessary indexes
CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON public.user_subscriptions(user_id);
CREATE INDEX IF NOT EXISTS idx_credit_transactions_user_id ON public.credit_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_ml_model_training_user_id ON public.ml_model_training(user_id);
CREATE INDEX IF NOT EXISTS idx_samples_user_id ON public.samples(user_id);
CREATE INDEX IF NOT EXISTS idx_images_user_id ON public.images(user_id);
CREATE INDEX IF NOT EXISTS idx_user_preferences_user_id ON public.user_preferences(user_id);

-- Existing constraints (unchanged)
ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."credits"
    ADD CONSTRAINT "credits_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "images_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."samples"
    ADD CONSTRAINT "samples_modelId_fkey" FOREIGN KEY ("modelId") REFERENCES "public"."models"("id") ON DELETE CASCADE;

-- Set up RLS policies
ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."plans" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_subscriptions" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."subscription_history" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."credit_transactions" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."ml_model_training" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."eye_color" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."hair_color" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."styles" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."user_preferences" ENABLE ROW LEVEL SECURITY;

-- Existing policies (unchanged)
CREATE POLICY "Enable insert for authenticated users only" ON "public"."credits" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "Enable insert for authenticated users only" ON "public"."samples" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = ( SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId"))));
CREATE POLICY "Enable insert for service role" ON "public"."credits" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable insert for service role" ON "public"."images" FOR INSERT TO "service_role" WITH CHECK (true);
CREATE POLICY "Enable insert for signed in users" ON "public"."models" FOR INSERT TO "authenticated" WITH CHECK (("user_id" = "auth"."uid"()));
CREATE POLICY "Enable read access for all authenticated users" ON "public"."images" FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "images"."modelId"))));
CREATE POLICY "Enable read access for authenticated users" ON "public"."credits" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "Enable read access for authenticated users" ON "public"."models" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));
CREATE POLICY "Enable read access for authenticated users" ON "public"."samples" FOR SELECT TO "authenticated" USING (("auth"."uid"() = ( SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId"))));
CREATE POLICY "Enable read access for service role" ON "public"."credits" FOR SELECT TO "service_role" USING (true);
CREATE POLICY "Enable update for authenticated users" ON "public"."credits" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));
CREATE POLICY "Enable update for service role" ON "public"."credits" FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);
CREATE POLICY "Enable update from service role" ON "public"."models" FOR UPDATE TO "service_role" USING (true) WITH CHECK (true);
CREATE POLICY "Enable updates for authenticated users to samples" ON "public"."samples" FOR UPDATE TO "authenticated" WITH CHECK (("auth"."uid"() = ( SELECT "models"."user_id" FROM "public"."models" WHERE ("models"."id" = "samples"."modelId"))));

-- New policies for new tables
CREATE POLICY "Users can view own data" ON "public"."users" FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Authenticated can view plans" ON "public"."plans" FOR SELECT TO authenticated USING (true);
CREATE POLICY "Users can view own subscriptions" ON "public"."user_subscriptions" FOR SELECT USING (auth.uid() = user_id);

-- Grant privileges
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."credits" TO "anon";
GRANT ALL ON TABLE "public"."credits" TO "authenticated";
GRANT ALL ON TABLE "public"."credits" TO "service_role";

GRANT ALL ON TABLE "public"."images" TO "anon";
GRANT ALL ON TABLE "public"."images" TO "authenticated";
GRANT ALL ON TABLE "public"."images" TO "service